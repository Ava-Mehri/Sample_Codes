# -*- coding: utf-8 -*-
#Ava Mehri, UIC, amehri2@uic.edu, 2021
#Noise canceller
#an adoptive noise canceller, Wiener filter, steepest descent algorithm to remove Gaussian random noises from audio signals.
"""NoiseCanceller.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18KTcpnQ2T2qMh5OTNePEfe4TDshhahAb
"""

#!pip install pycorrelate

from scipy.io import wavfile
from scipy import signal
from scipy.linalg import toeplitz
import numpy as np
import pycorrelate as pyc

Fs, signal = wavfile.read('Abr.wav')

signal_len = len(signal)
signal_len

signal = np.array(signal[0:1400000, 1])
l = len(signal)

signal = signal/max(signal)

var = 0.1
noise = np.sqrt(var)*np.random.randn(l)

noisySig = signal + noise;

wavfile.write('noisy_Abr.wav', Fs, noisySig)

n = 100
k = 10000

p = np.zeros((n, 1))
p[1] = var
p = np.asmatrix(p)

R = pyc.ucorrelate(noise, noise, maxlag=2*n)

R = R[n:2*n]

R = toeplitz(R)

w0 = np.matmul((np.linalg.inv(R)), p)
w0 = np.asmatrix(w0)

error = np.zeros((l, 1))
error = np.asmatrix(error)

s = np.append([0], noise)
s = np.asmatrix(s)

w1 = -2*np.ones((n, 1))
w1 = np.asmatrix(w1)

m = 0.001

wt = np.zeros((n, l))
wt = np.asmatrix(wt)
wt[:,0] = w0

for column in range(n, l):
  w1 = w1 + m*(p- np.matmul(R,w1))
  wt[:, column] = w1
  temp_s = np.flip(s[:, column-n:column])
  error[column] = np.matmul(temp_s, w0)

error.shape

e = error

e = np.squeeze(np.asarray(e[1:l]))

e = np.append(e,0)

denoised = noisySig - e

wavfile.write('denoised_Abr.wav', Fs, denoised)

SNR_noisy = np.sum(np.square(signal))/np.sum(np.square(noise))

SNR_noisy

remainedNoise = denoised - signal

SNR_denoised = np.sum(np.square(signal))/np.sum(np.square(remainedNoise))

SNR_denoised